
from scipy import signal
import numpy as np
import time
from datetime import datetime
class SignalGenerator:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÄ‡∏ä‡πà‡∏ô step, ramp, sine, impulse ‡∏Ø‡∏•‡∏Ø
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô input ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö process/plant
    """
    def __init__(self, sampling_time=0.1):
        self.sampling_time = sampling_time  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (sampling time)

    def unit_step(self, duration, amplitude=1):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì step (‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)"""
        n_samples = int(duration / self.sampling_time)
        return np.ones(n_samples) * amplitude

    def ramp(self, duration, slope=1):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì ramp (‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ)"""
        n_samples = int(duration / self.sampling_time)
        return np.arange(0, n_samples) * slope * self.sampling_time

    def impulse(self, duration, amplitude=1):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì impulse (‡∏û‡∏∏‡πà‡∏á spike ‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå)"""
        n_samples = int(duration / self.sampling_time)
        signal = np.zeros(n_samples)
        signal[0] = amplitude
        return signal

    def sine(self, duration, amplitude=1, frequency=1):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏ã‡∏ô‡πå (sine wave)"""
        n_samples = int(duration / self.sampling_time)
        t = np.arange(0, n_samples) * self.sampling_time
        return amplitude * np.sin(2 * np.pi * frequency * t)

    def square(self, duration, amplitude=1, frequency=1, duty=0.5):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì pulse/square wave"""
        n_samples = int(duration / self.sampling_time)
        t = np.arange(0, n_samples) * self.sampling_time
        return amplitude * ((t % (1/frequency)) < duty/frequency).astype(float)

    def parabolic(self, duration, a=1):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏û‡∏≤‡∏£‡∏≤‡πÇ‡∏ö‡∏•‡∏≤ (quadratic/parabolic input)"""
        n_samples = int(duration / self.sampling_time)
        t = np.arange(0, n_samples) * self.sampling_time
        return a * (t**2)

class TestRunner:
    """
    TestRunner: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡πâ
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
    """
    def __init__(self, modbus, logger, sampling_time=0.1):
        self.modbus = modbus
        self.logger = logger
        self.sampling_time = sampling_time

    def run_test(self, signals, signal_duration=5, sleep_between=2):
        """
        signals: list ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì ["step", "sine", "impulse", ...]
        signal_duration: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        sleep_between: ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        """
        for sig_type in signals:
            print(f"\nüöÄ Running test for signal: {sig_type}")

            # Reset Logger
            self.logger.df = self.logger.df.iloc[0:0]

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            generator = SignalGenerator(duration=signal_duration, sampling_time=self.sampling_time)
            if sig_type == "step":
                t, signal = generator.step()
            elif sig_type == "ramp":
                t, signal = generator.ramp()
            elif sig_type == "impulse":
                t, signal = generator.impulse()
            elif sig_type == "parabolic":
                t, signal = generator.parabolic()
            elif sig_type == "sine":
                t, signal = generator.sine(freq=1.0)
            elif sig_type == "square":
                t, signal = generator.square(freq=1.0)
            elif sig_type == "sawtooth":
                t, signal = generator.sawtooth(freq=1.0)
            else:
                print(f"‚ö†Ô∏è Unknown signal type: {sig_type}")
                continue

            # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤
            for idx, u in enumerate(signal):
                self.modbus.write_holding_register(1025, int(u))
                y = self.modbus.analog_read(1)
                self.logger.add_data_log(
                    ["time", "input", "output", "signal_type"],
                    [[t[idx]], [u], [y], [sig_type]]
                )
                time.sleep(self.sampling_time)

            # Save log
            timestamp = datetime.now().strftime("%H%M%S")
            file_name = f"{sig_type}_{timestamp}.csv"
            self.logger.save_to_csv(file_name, folder_name="test_results")

            # Delay ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            print(f"‚è∏ Sleep {sleep_between} sec before next signal...")
            time.sleep(sleep_between)